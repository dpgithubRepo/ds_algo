package com.java.ds.algos;


/**
 * Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.

 

Example 1:

Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.
Example 2:

Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.
Example 3:

Input: nums1 = [0,0], nums2 = [0,0]
Output: 0.00000
Example 4:

Input: nums1 = [], nums2 = [1]
Output: 1.00000
Example 5:

Input: nums1 = [2], nums2 = []
 */
import java.util.Arrays;
class MedianFinder {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int totalLen = nums1.length+nums2.length;
		int[] merged = new int[totalLen];
		int len1 = nums1.length;

		for(int i=0;i<len1;i++) {
			merged[i] = nums1[i];
		}
		for(int i=0;i<nums2.length;i++) {
			merged[len1++]= nums2[i];
		}
		Arrays.sort(merged);
		if(totalLen%2==1) {
			return merged[totalLen/2];
		}
        
			int mid = totalLen/2;
			double d1 = merged[mid];
			double d2 = merged[mid-1];
			return (d1+d2)/2;
	
    }
}
